// This file is generated by codegen/index.ts
// Do not edit this file manually
import { Command, Option } from 'clipanion'
import * as typanion from 'typanion'

export abstract class BaseNewCommand extends Command {
  static paths = [['new']]

  static usage = Command.Usage({
    description: 'Create a new project with pre-configured boilerplate',
  })

  $$path = Option.String({ required: true })

  $$name?: string = Option.String('--name,-n', {
    description:
      'The name of the project, default to the name of the directory if not provided',
  })

  minNodeApiVersion = Option.String('--min-node-api,-v', '4', {
    validator: typanion.isNumber(),
    description: 'The minimum Node-API version to support',
  })

  license = Option.String('--license,-l', 'MIT', {
    description: 'License for open-sourced project',
  })

  targets = Option.Array('--targets,-t', [], {
    description: 'All targets the crate will be compiled for.',
  })

  enableDefaultTargets = Option.Boolean('--enable-default-targets', true, {
    description: 'Whether enable default targets',
  })

  enableAllTargets = Option.Boolean('--enable-all-targets', false, {
    description: 'Whether enable all targets',
  })

  enableTypeDef = Option.Boolean('--enable-type-def', true, {
    description:
      'Whether enable the `type-def` feature for typescript definitions auto-generation',
  })

  enableGithubActions = Option.Boolean('--enable-github-actions', true, {
    description: 'Whether generate preconfigured GitHub Actions workflow',
  })

  dryRun = Option.Boolean('--dry-run', false, {
    description: 'Whether to run the command in dry-run mode',
  })

  getOptions() {
    return {
      path: this.$$path,
      name: this.$$name,
      minNodeApiVersion: this.minNodeApiVersion,
      license: this.license,
      targets: this.targets,
      enableDefaultTargets: this.enableDefaultTargets,
      enableAllTargets: this.enableAllTargets,
      enableTypeDef: this.enableTypeDef,
      enableGithubActions: this.enableGithubActions,
      dryRun: this.dryRun,
    }
  }
}

/**
 * Create a new project with pre-configured boilerplate
 */
export interface NewOptions {
  /**
   * The path where the napi-rs project will be created.
   */
  path: string
  /**
   * The name of the project, default to the name of the directory if not provided
   */
  name?: string
  /**
   * The minimum Node-API version to support
   *
   * @default 4
   */
  minNodeApiVersion?: number
  /**
   * License for open-sourced project
   *
   * @default 'MIT'
   */
  license?: string
  /**
   * All targets the crate will be compiled for.
   *
   * @default []
   */
  targets?: string[]
  /**
   * Whether enable default targets
   *
   * @default true
   */
  enableDefaultTargets?: boolean
  /**
   * Whether enable all targets
   *
   * @default false
   */
  enableAllTargets?: boolean
  /**
   * Whether enable the `type-def` feature for typescript definitions auto-generation
   *
   * @default true
   */
  enableTypeDef?: boolean
  /**
   * Whether generate preconfigured GitHub Actions workflow
   *
   * @default true
   */
  enableGithubActions?: boolean
  /**
   * Whether to run the command in dry-run mode
   *
   * @default false
   */
  dryRun?: boolean
}

export function applyDefaultNewOptions(options: NewOptions) {
  return {
    minNodeApiVersion: 4,
    license: 'MIT',
    targets: [],
    enableDefaultTargets: true,
    enableAllTargets: false,
    enableTypeDef: true,
    enableGithubActions: true,
    dryRun: false,
    ...options,
  }
}
