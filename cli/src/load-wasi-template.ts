export const createWasiBinding = (
  localName: string,
  wasiRegisterFunctions: string[],
) => `/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */\n
import { readFileSync } from 'fs'
import { join } from 'path'
import { WASI } from 'wasi'
import { fileURLToPath } from 'url'

import { createNapiModule } from '@emnapi/core'
import { getDefaultContext } from '@emnapi/runtime'

const wasi = new WASI()

const __dirname = join(fileURLToPath(import.meta.url), '..')

const context = getDefaultContext()

const napiModule = createNapiModule({
  context,
})

const wasmBuffer = readFileSync(join(__dirname, '${localName}.wasi-wasm32.wasm'))

const { instance, module: wasiModule } = await WebAssembly.instantiate(wasmBuffer, {
  wasi_snapshot_preview1: wasi.wasiImport,
  env: {
    ...napiModule.imports.env,
    ...napiModule.imports.napi,
    ...napiModule.imports.emnapi,
  },
})

wasi.initialize(instance)

function __napi_rs_initialize_modules() {
${wasiRegisterFunctions
  .map((name) => `  instance.exports['${name}']()`)
  .join('\n')}
}

__napi_rs_initialize_modules()

const binding = napiModule.init({
  instance,
  module: wasiModule,
  memory: instance.exports.memory,
  table: instance.exports.__indirect_function_table,
})
`
