export const createWasiBinding = (
  localName: string,
  wasiRegisterFunctions: string[],
) => `/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */\n
import * as __nodeFsPromises from 'node:fs/promises'
import * as __nodePath from 'node:path'
import { WASI as __nodeWASI } from 'node:wasi'
import * as __nodeURL from 'node:url'

import { createNapiModule as __emnapiCreateNapiModule } from '@emnapi/core'
import { getDefaultContext as __emnapiGetDefaultContext } from '@emnapi/runtime'

const __wasi = new __nodeWASI()

const __dirname = __nodePath.join(__nodeURL.fileURLToPath(import.meta.url), '..')

const __emnapiContext = __emnapiGetDefaultContext()

const __napiModule = __emnapiCreateNapiModule({
  context: __emnapiContext,
})

const __wasmBuffer = await __nodeFsPromises.readFile(__nodePath.join(__dirname, '${localName}.wasi-wasm32.wasm'))

const { instance: __napiInstance, module: __wasiModule } = await WebAssembly.instantiate(__wasmBuffer, {
  wasi_snapshot_preview1: __wasi.wasiImport,
  env: {
    ...__napiModule.imports.env,
    ...__napiModule.imports.napi,
    ...__napiModule.imports.emnapi,
  },
})

__wasi.initialize(__napiInstance)

function __napi_rs_initialize_modules() {
${wasiRegisterFunctions
  .map((name) => `  __napiInstance.exports['${name}']()`)
  .join('\n')}
}

__napi_rs_initialize_modules()

const binding = __napiModule.init({
  instance: __napiInstance,
  module: __wasiModule,
  memory: __napiInstance.exports.memory,
  table: __napiInstance.exports.__indirect_function_table,
})
`
